export class CuppaStorage{static async setData(name,opts){return await cuppa.setData(name,opts)}static async getData(name,opts){return await cuppa.getData(name,opts)}static async deleteData(name,opts){await cuppa.deleteData(name,opts)}static removeCallback(name,callback){cuppa.removeListener(name,callback)}static removeListener(name,callback){CuppaStorage.removeCallback(name,callback)}static removeAllCallbacks(name){cuppa.removeListenerGroup(name)}}CuppaStorage.LOCAL="LOCAL",CuppaStorage.SESSION="SESSION",CuppaStorage.INDEXED_DB="INDEXED_DB",document.defaultView.CuppaStorage=CuppaStorage;export class GetStorage extends HTMLElement{name;store;default;data;constructor(){super(),this.onUpdateStorage=this.onUpdateStorage.bind(this)}connectedCallback(){setTimeout(()=>{this.name=this.getAttribute("name"),this.store=this.getAttribute("store"),this.default=this.getAttribute("default"),CuppaStorage.getData(this.name,{callback:this.onUpdateStorage,default:this.default,store:this.store})},0)}onUpdateStorage(data){this.data=data,this.dispatchEvent(new CustomEvent("update",{detail:this.data}))}disconnectedCallback(){CuppaStorage.removeCallback(this.name,this.onUpdateStorage)}}customElements.define("get-storage",GetStorage),document.defaultView.GetStorage=GetStorage;const cuppa=document.defaultView.cuppa||{};cuppa.dataDefault=cuppa.dataDefault||{},cuppa.data=cuppa.data||{},cuppa.setData=async function(name,opts){if(null!=(opts={storage:"",silence:!1,data:null,...opts}).store&&(opts.storage=opts.store),void 0!==opts.default&&null!==opts.default){cuppa.dataDefault[name]=opts.default,opts.default=null;let current=cuppa.getData(name,opts);return null!=current&&null!=current||(current=cuppa.dataDefault[name]),opts.data=current,void cuppa.setData(name,opts).then()}cuppa.data[name]=opts.data,String(opts.storage).toUpperCase()===CuppaStorage.LOCAL?localStorage.setItem(name,JSON.stringify(opts.data)):String(opts.storage).toUpperCase()===CuppaStorage.SESSION?sessionStorage.setItem(name,JSON.stringify(opts.data)):String(opts.storage).toUpperCase()===CuppaStorage.INDEXED_DB&&await CuppaStorage.db.add(name,opts.data),opts.silence||cuppa.executeListener(name,opts.data)},cuppa.getData=async function(name,opts){null!=(opts={storage:"",callback:null,default:null,...opts}).store&&(opts.storage=opts.store);let data=cuppa.data[name];if(String(opts.storage).toUpperCase()===CuppaStorage.LOCAL){let ls=localStorage.getItem(name);ls&&(data=JSON.parse(ls))}else if(String(opts.storage).toUpperCase()===CuppaStorage.SESSION){let st=sessionStorage.getItem(name);st&&(data=JSON.parse(st))}else String(opts.storage).toUpperCase()===CuppaStorage.INDEXED_DB&&(data=await CuppaStorage.db.get(name));return void 0===data&&(data=opts.default),null!=data&&opts.callback&&opts.callback(data),opts.callback&&cuppa.addListener(name,opts.callback),data},cuppa.deleteData=async function(name,opts){null!=(opts={storage:"",...opts}).store&&(opts.storage=opts.store),cuppa.data[name]=null,"local"===opts.storage?localStorage.removeItem(name):"session"===opts.storage?sessionStorage.removeItem(name):String(opts.storage).toUpperCase()===CuppaStorage.INDEXED_DB&&await CuppaStorage.db.delete(name)},cuppa.listeners=cuppa.listeners||{},cuppa.addListener=function(name,callback){cuppa.listeners[name]||(cuppa.listeners[name]=[]),cuppa.listeners[name].push(callback)},cuppa.removeListener=function(name,callback,toString){cuppa.listeners[name]||(cuppa.listeners[name]=[]);let array=cuppa.listeners[name];for(let i=0;i<array.length;i++)toString?array[i].toString()===callback.toString()&&array.splice(i,1):array[i]===callback&&array.splice(i,1)},cuppa.removeListenerGroup=function(name){delete cuppa.listeners[name]},cuppa.executeListener=function(name,data){cuppa.listeners[name]||(cuppa.listeners[name]=[]);let array=cuppa.listeners[name];for(let i=0;i<array.length;i++)array[i](data)};class CuppaStorageInnoDB{config={db:"cuppa_db",storage:"cuppa_storage",version:1,update:!1};db;constructor(config){this.config={...this.config,...config},this._binAll(this)}async connect(){let config=this.config,currentDB=await indexedDB.databases();currentDB=currentDB.filter(db=>db.name==config.db)[0],config.version=currentDB&&config.update?currentDB.version+1:currentDB?currentDB.version:config.version;const request=indexedDB.open(config.db,config.version);return request.onupgradeneeded=this.onUpdateDB,await new Promise(resolve=>{request.onsuccess=e=>{this.db=e.target.result,resolve(this)}})}async onUpdateDB(e){this.db=e.target.result;let{db:db,config:config}=this;db.objectStoreNames.contains(config.storage)||db.createObjectStore(config.storage,{keyPath:"name"})}async add(name,value,returnValue){this.db||await this.connect();let{db:db,config:config}=this,transaction,storage=db.transaction(config.storage,"readwrite").objectStore(config.storage),data={name:name,value:value};return await new Promise(resolve=>{let request=storage.put(data);request.onsuccess=()=>{resolve(request.result)},request.onerror=err=>{resolve(null,err.target.error)}}),await this.get(name,returnValue)}async get(name,returnValue){null==returnValue&&(returnValue=!0),this.db||await this.connect();let{db:db,config:config}=this,transaction,storage=db.transaction(config.storage,"readwrite").objectStore(config.storage),result;return await new Promise(resolve=>{let request=storage.get(name);request.onsuccess=()=>{resolve(returnValue&&request.result?request.result.value:request.result)},request.onerror=err=>{resolve(null)}})}async delete(name){this.db||await this.connect();let{db:db,config:config}=this,transaction,storage;db.transaction(config.storage,"readwrite").objectStore(config.storage).delete(name)}_binAll(element,isFunction){let propertyNames=Object.getOwnPropertyNames(Object.getPrototypeOf(element));isFunction&&(propertyNames=Object.keys(element));for(let i=0;i<propertyNames.length;i++)"function"==typeof element[propertyNames[i]]&&(element[propertyNames[i]]=element[propertyNames[i]].bind(element))}}CuppaStorage.db=new CuppaStorageInnoDB;